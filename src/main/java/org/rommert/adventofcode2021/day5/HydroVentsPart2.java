package org.rommert.adventofcode2021.day5;

import org.rommert.adventofcode2021.InputParser;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

import static java.lang.Math.abs;

public class HydroVentsPart2 {
  private static final String input = "905,103 -> 905,82\n" +
      "253,13 -> 253,546\n" +
      "578,60 -> 900,60\n" +
      "102,71 -> 535,71\n" +
      "678,419 -> 678,363\n" +
      "366,938 -> 366,136\n" +
      "15,299 -> 149,165\n" +
      "445,99 -> 464,80\n" +
      "519,262 -> 814,262\n" +
      "687,609 -> 687,219\n" +
      "528,128 -> 398,128\n" +
      "704,363 -> 49,363\n" +
      "335,157 -> 335,715\n" +
      "536,120 -> 215,441\n" +
      "494,587 -> 494,764\n" +
      "15,672 -> 15,835\n" +
      "748,346 -> 748,471\n" +
      "231,395 -> 89,395\n" +
      "922,989 -> 18,85\n" +
      "787,828 -> 453,828\n" +
      "117,186 -> 729,798\n" +
      "647,201 -> 439,201\n" +
      "368,399 -> 261,399\n" +
      "337,294 -> 301,294\n" +
      "20,660 -> 396,660\n" +
      "658,383 -> 658,445\n" +
      "284,225 -> 284,202\n" +
      "89,582 -> 89,468\n" +
      "517,582 -> 400,582\n" +
      "168,167 -> 168,473\n" +
      "697,682 -> 408,393\n" +
      "528,198 -> 528,245\n" +
      "189,171 -> 785,767\n" +
      "679,598 -> 965,598\n" +
      "149,560 -> 187,560\n" +
      "778,734 -> 406,734\n" +
      "626,959 -> 626,330\n" +
      "392,479 -> 392,461\n" +
      "70,705 -> 70,498\n" +
      "462,132 -> 380,50\n" +
      "776,690 -> 776,413\n" +
      "710,894 -> 153,894\n" +
      "484,532 -> 706,754\n" +
      "72,148 -> 72,120\n" +
      "441,81 -> 576,81\n" +
      "367,959 -> 367,199\n" +
      "217,706 -> 217,471\n" +
      "715,418 -> 963,170\n" +
      "26,126 -> 26,659\n" +
      "750,126 -> 589,126\n" +
      "404,257 -> 404,136\n" +
      "809,148 -> 848,148\n" +
      "647,205 -> 572,205\n" +
      "977,67 -> 223,821\n" +
      "846,299 -> 846,444\n" +
      "575,946 -> 575,742\n" +
      "216,853 -> 969,853\n" +
      "120,600 -> 120,351\n" +
      "105,565 -> 100,565\n" +
      "184,781 -> 747,781\n" +
      "133,727 -> 662,198\n" +
      "273,388 -> 273,828\n" +
      "472,324 -> 539,324\n" +
      "497,889 -> 497,249\n" +
      "56,145 -> 655,145\n" +
      "883,99 -> 986,99\n" +
      "391,607 -> 503,719\n" +
      "321,835 -> 865,291\n" +
      "847,436 -> 754,343\n" +
      "381,105 -> 381,648\n" +
      "100,101 -> 120,101\n" +
      "67,324 -> 724,981\n" +
      "68,618 -> 316,370\n" +
      "202,807 -> 202,382\n" +
      "751,318 -> 689,318\n" +
      "95,811 -> 95,695\n" +
      "644,293 -> 644,487\n" +
      "715,331 -> 309,737\n" +
      "62,954 -> 62,605\n" +
      "25,37 -> 962,974\n" +
      "642,201 -> 178,201\n" +
      "102,74 -> 102,764\n" +
      "752,127 -> 435,444\n" +
      "533,875 -> 808,600\n" +
      "984,389 -> 984,551\n" +
      "420,329 -> 420,705\n" +
      "682,965 -> 319,602\n" +
      "140,416 -> 671,416\n" +
      "11,14 -> 984,987\n" +
      "833,846 -> 833,217\n" +
      "414,434 -> 19,829\n" +
      "138,384 -> 138,80\n" +
      "535,61 -> 208,388\n" +
      "900,303 -> 170,303\n" +
      "24,980 -> 984,20\n" +
      "477,794 -> 74,391\n" +
      "496,101 -> 462,101\n" +
      "981,848 -> 981,244\n" +
      "721,974 -> 721,911\n" +
      "887,135 -> 696,135\n" +
      "865,641 -> 865,359\n" +
      "194,19 -> 920,745\n" +
      "520,227 -> 704,227\n" +
      "644,755 -> 830,755\n" +
      "737,799 -> 56,118\n" +
      "259,79 -> 249,79\n" +
      "970,152 -> 970,545\n" +
      "396,389 -> 396,971\n" +
      "383,904 -> 510,777\n" +
      "199,960 -> 989,170\n" +
      "376,55 -> 376,427\n" +
      "615,566 -> 272,223\n" +
      "266,343 -> 334,275\n" +
      "842,295 -> 935,295\n" +
      "450,175 -> 240,175\n" +
      "179,842 -> 977,842\n" +
      "170,719 -> 708,181\n" +
      "172,745 -> 128,701\n" +
      "180,329 -> 180,336\n" +
      "471,762 -> 989,762\n" +
      "524,889 -> 807,606\n" +
      "255,806 -> 255,937\n" +
      "819,869 -> 819,714\n" +
      "695,339 -> 528,339\n" +
      "65,925 -> 786,204\n" +
      "814,227 -> 159,882\n" +
      "799,73 -> 959,73\n" +
      "163,177 -> 163,468\n" +
      "167,600 -> 167,347\n" +
      "742,24 -> 64,24\n" +
      "448,91 -> 499,91\n" +
      "134,602 -> 426,310\n" +
      "468,314 -> 107,314\n" +
      "175,712 -> 872,15\n" +
      "398,225 -> 398,502\n" +
      "960,64 -> 960,406\n" +
      "54,514 -> 54,914\n" +
      "626,836 -> 626,398\n" +
      "599,544 -> 344,289\n" +
      "746,635 -> 547,834\n" +
      "107,747 -> 824,30\n" +
      "347,15 -> 178,15\n" +
      "204,532 -> 621,115\n" +
      "850,523 -> 850,235\n" +
      "986,932 -> 986,600\n" +
      "891,150 -> 891,182\n" +
      "769,783 -> 769,540\n" +
      "148,269 -> 805,269\n" +
      "127,67 -> 957,897\n" +
      "851,411 -> 396,411\n" +
      "619,913 -> 435,913\n" +
      "210,808 -> 763,255\n" +
      "548,140 -> 896,140\n" +
      "495,420 -> 495,510\n" +
      "332,967 -> 332,412\n" +
      "539,613 -> 317,613\n" +
      "426,765 -> 426,123\n" +
      "980,18 -> 14,984\n" +
      "921,551 -> 921,923\n" +
      "764,88 -> 41,811\n" +
      "959,702 -> 959,229\n" +
      "171,473 -> 171,401\n" +
      "588,769 -> 373,769\n" +
      "599,695 -> 18,695\n" +
      "878,126 -> 108,896\n" +
      "852,141 -> 592,141\n" +
      "401,268 -> 213,268\n" +
      "227,988 -> 88,988\n" +
      "794,124 -> 704,124\n" +
      "276,914 -> 429,914\n" +
      "330,884 -> 330,816\n" +
      "841,591 -> 628,591\n" +
      "356,325 -> 356,149\n" +
      "718,478 -> 722,478\n" +
      "570,802 -> 303,802\n" +
      "697,782 -> 148,233\n" +
      "279,662 -> 279,608\n" +
      "460,752 -> 988,752\n" +
      "108,951 -> 837,222\n" +
      "509,371 -> 509,952\n" +
      "35,190 -> 90,135\n" +
      "684,391 -> 460,391\n" +
      "493,153 -> 296,153\n" +
      "989,744 -> 989,811\n" +
      "962,22 -> 214,770\n" +
      "122,511 -> 44,511\n" +
      "761,860 -> 378,860\n" +
      "663,599 -> 30,599\n" +
      "963,826 -> 177,40\n" +
      "921,136 -> 745,136\n" +
      "424,688 -> 131,688\n" +
      "284,299 -> 284,853\n" +
      "73,205 -> 73,864\n" +
      "152,747 -> 141,736\n" +
      "283,305 -> 283,19\n" +
      "535,537 -> 483,537\n" +
      "749,200 -> 749,395\n" +
      "259,666 -> 199,606\n" +
      "571,288 -> 872,589\n" +
      "748,503 -> 254,503\n" +
      "903,865 -> 501,463\n" +
      "641,712 -> 807,712\n" +
      "334,432 -> 334,388\n" +
      "394,442 -> 936,984\n" +
      "661,183 -> 275,183\n" +
      "346,842 -> 88,842\n" +
      "503,570 -> 503,745\n" +
      "825,388 -> 763,326\n" +
      "948,575 -> 948,927\n" +
      "708,761 -> 708,15\n" +
      "96,545 -> 851,545\n" +
      "874,71 -> 874,986\n" +
      "908,355 -> 552,355\n" +
      "296,596 -> 487,596\n" +
      "78,877 -> 918,37\n" +
      "934,969 -> 15,50\n" +
      "798,667 -> 333,667\n" +
      "111,974 -> 391,974\n" +
      "687,514 -> 255,514\n" +
      "261,751 -> 261,774\n" +
      "637,144 -> 637,212\n" +
      "268,710 -> 268,705\n" +
      "737,246 -> 682,246\n" +
      "961,143 -> 140,964\n" +
      "294,911 -> 187,911\n" +
      "372,495 -> 764,495\n" +
      "794,567 -> 120,567\n" +
      "935,681 -> 479,681\n" +
      "68,53 -> 989,974\n" +
      "395,550 -> 664,550\n" +
      "190,885 -> 291,885\n" +
      "897,667 -> 897,789\n" +
      "826,922 -> 47,143\n" +
      "468,378 -> 793,378\n" +
      "580,802 -> 164,802\n" +
      "492,321 -> 39,774\n" +
      "602,421 -> 252,71\n" +
      "79,749 -> 721,749\n" +
      "826,196 -> 826,728\n" +
      "564,632 -> 564,137\n" +
      "594,747 -> 594,412\n" +
      "964,735 -> 987,758\n" +
      "388,630 -> 815,203\n" +
      "666,892 -> 666,279\n" +
      "980,767 -> 980,370\n" +
      "607,459 -> 110,956\n" +
      "680,875 -> 680,65\n" +
      "970,893 -> 133,56\n" +
      "339,254 -> 339,893\n" +
      "347,602 -> 888,61\n" +
      "435,946 -> 379,946\n" +
      "812,855 -> 812,415\n" +
      "814,385 -> 814,661\n" +
      "721,765 -> 721,181\n" +
      "176,468 -> 176,379\n" +
      "550,947 -> 456,947\n" +
      "53,813 -> 838,28\n" +
      "29,24 -> 973,968\n" +
      "654,807 -> 380,807\n" +
      "950,266 -> 950,339\n" +
      "959,429 -> 959,54\n" +
      "35,20 -> 35,922\n" +
      "11,10 -> 988,987\n" +
      "409,554 -> 390,554\n" +
      "862,235 -> 116,981\n" +
      "716,11 -> 617,11\n" +
      "472,382 -> 472,441\n" +
      "798,549 -> 402,549\n" +
      "29,724 -> 29,35\n" +
      "333,531 -> 488,531\n" +
      "196,334 -> 196,166\n" +
      "82,394 -> 706,394\n" +
      "314,751 -> 314,748\n" +
      "657,111 -> 657,900\n" +
      "833,382 -> 833,813\n" +
      "352,479 -> 352,46\n" +
      "608,449 -> 608,853\n" +
      "687,727 -> 641,681\n" +
      "392,828 -> 307,828\n" +
      "208,244 -> 775,244\n" +
      "922,286 -> 89,286\n" +
      "762,736 -> 83,736\n" +
      "143,57 -> 913,827\n" +
      "787,933 -> 787,42\n" +
      "209,692 -> 447,692\n" +
      "99,891 -> 765,225\n" +
      "55,735 -> 55,909\n" +
      "898,75 -> 81,892\n" +
      "121,685 -> 158,722\n" +
      "415,461 -> 415,374\n" +
      "158,898 -> 730,326\n" +
      "186,988 -> 186,609\n" +
      "924,913 -> 924,646\n" +
      "35,899 -> 124,899\n" +
      "495,259 -> 201,259\n" +
      "914,828 -> 914,716\n" +
      "368,78 -> 734,444\n" +
      "735,97 -> 42,790\n" +
      "972,895 -> 447,895\n" +
      "197,834 -> 320,834\n" +
      "799,165 -> 14,950\n" +
      "348,556 -> 562,556\n" +
      "71,23 -> 984,936\n" +
      "974,871 -> 729,871\n" +
      "706,378 -> 817,378\n" +
      "885,287 -> 467,287\n" +
      "741,691 -> 61,11\n" +
      "227,632 -> 531,328\n" +
      "716,795 -> 160,239\n" +
      "327,261 -> 855,789\n" +
      "100,263 -> 582,745\n" +
      "729,72 -> 73,72\n" +
      "853,546 -> 853,802\n" +
      "399,472 -> 106,765\n" +
      "787,848 -> 619,848\n" +
      "866,150 -> 127,889\n" +
      "862,48 -> 34,876\n" +
      "579,257 -> 579,601\n" +
      "685,633 -> 227,175\n" +
      "670,161 -> 396,161\n" +
      "156,694 -> 785,65\n" +
      "232,384 -> 232,327\n" +
      "544,83 -> 307,83\n" +
      "98,273 -> 442,273\n" +
      "34,975 -> 988,21\n" +
      "739,802 -> 739,264\n" +
      "409,402 -> 466,402\n" +
      "700,95 -> 677,95\n" +
      "989,14 -> 16,987\n" +
      "921,989 -> 152,220\n" +
      "857,821 -> 78,42\n" +
      "335,114 -> 467,114\n" +
      "17,50 -> 904,937\n" +
      "757,372 -> 698,372\n" +
      "42,28 -> 600,586\n" +
      "867,617 -> 516,617\n" +
      "909,281 -> 909,178\n" +
      "254,879 -> 685,879\n" +
      "133,353 -> 696,353\n" +
      "430,146 -> 441,135\n" +
      "720,657 -> 720,909\n" +
      "389,462 -> 780,71\n" +
      "945,152 -> 657,440\n" +
      "364,570 -> 364,336\n" +
      "268,67 -> 254,67\n" +
      "171,951 -> 895,227\n" +
      "706,332 -> 706,380\n" +
      "265,703 -> 517,703\n" +
      "542,421 -> 542,534\n" +
      "900,67 -> 752,215\n" +
      "307,205 -> 307,321\n" +
      "319,111 -> 319,793\n" +
      "158,419 -> 499,78\n" +
      "32,148 -> 372,148\n" +
      "375,937 -> 375,241\n" +
      "757,928 -> 757,724\n" +
      "508,638 -> 508,747\n" +
      "68,655 -> 68,24\n" +
      "209,949 -> 209,782\n" +
      "193,359 -> 193,258\n" +
      "580,542 -> 799,542\n" +
      "556,326 -> 556,533\n" +
      "984,930 -> 98,44\n" +
      "771,447 -> 158,447\n" +
      "951,544 -> 951,469\n" +
      "100,148 -> 880,928\n" +
      "342,800 -> 688,800\n" +
      "381,839 -> 381,662\n" +
      "510,340 -> 499,340\n" +
      "114,864 -> 958,20\n" +
      "131,357 -> 131,913\n" +
      "306,877 -> 336,877\n" +
      "195,755 -> 892,58\n" +
      "63,936 -> 878,121\n" +
      "144,505 -> 144,945\n" +
      "769,25 -> 314,25\n" +
      "94,831 -> 198,831\n" +
      "121,818 -> 127,818\n" +
      "228,982 -> 228,788\n" +
      "139,730 -> 770,99\n" +
      "43,973 -> 953,63\n" +
      "837,435 -> 498,774\n" +
      "168,803 -> 918,53\n" +
      "512,346 -> 512,255\n" +
      "174,149 -> 986,961\n" +
      "436,66 -> 436,639\n" +
      "704,707 -> 704,259\n" +
      "161,101 -> 161,415\n" +
      "482,254 -> 42,694\n" +
      "39,843 -> 811,71\n" +
      "628,555 -> 541,555\n" +
      "192,274 -> 196,274\n" +
      "736,140 -> 606,270\n" +
      "910,203 -> 598,515\n" +
      "354,785 -> 354,294\n" +
      "264,663 -> 155,663\n" +
      "139,193 -> 139,792\n" +
      "212,48 -> 948,784\n" +
      "696,252 -> 68,880\n" +
      "908,29 -> 114,823\n" +
      "515,23 -> 515,504\n" +
      "977,746 -> 977,691\n" +
      "837,714 -> 773,714\n" +
      "462,921 -> 462,294\n" +
      "395,630 -> 931,94\n" +
      "336,318 -> 45,609\n" +
      "917,288 -> 917,534\n" +
      "78,590 -> 543,590\n" +
      "416,555 -> 416,461\n" +
      "272,141 -> 441,141\n" +
      "883,813 -> 892,822\n" +
      "45,90 -> 892,937\n" +
      "890,16 -> 146,760\n" +
      "506,765 -> 555,716\n" +
      "313,818 -> 313,649\n" +
      "867,668 -> 777,668\n" +
      "804,484 -> 804,821\n" +
      "374,895 -> 374,50\n" +
      "173,980 -> 173,796\n" +
      "74,45 -> 336,307\n" +
      "316,922 -> 866,922\n" +
      "187,896 -> 265,974\n" +
      "790,160 -> 790,290\n" +
      "753,907 -> 753,445\n" +
      "70,718 -> 168,620\n" +
      "565,672 -> 599,672\n" +
      "563,87 -> 790,87\n" +
      "947,635 -> 843,739\n" +
      "712,556 -> 712,313\n" +
      "928,138 -> 928,781\n" +
      "677,720 -> 677,982\n" +
      "420,131 -> 804,515\n" +
      "980,416 -> 314,416\n" +
      "790,221 -> 790,866\n" +
      "289,680 -> 289,343\n" +
      "968,591 -> 973,591\n" +
      "289,265 -> 289,985\n" +
      "448,194 -> 448,185\n" +
      "424,457 -> 372,405\n" +
      "92,825 -> 355,825\n" +
      "108,89 -> 434,89\n" +
      "785,155 -> 785,769\n" +
      "829,916 -> 829,879\n" +
      "983,159 -> 983,799\n" +
      "467,357 -> 467,13\n" +
      "552,461 -> 60,461\n" +
      "315,339 -> 490,164\n" +
      "33,14 -> 978,959\n" +
      "769,414 -> 879,414\n" +
      "546,739 -> 200,739\n" +
      "389,874 -> 389,456\n" +
      "88,372 -> 779,372\n" +
      "327,491 -> 801,491\n" +
      "130,922 -> 586,466\n" +
      "949,106 -> 113,942\n" +
      "335,257 -> 338,257\n" +
      "339,695 -> 621,977\n" +
      "819,222 -> 819,963\n" +
      "744,214 -> 744,158\n" +
      "190,630 -> 866,630\n" +
      "313,268 -> 313,485\n" +
      "158,696 -> 696,696\n" +
      "957,24 -> 460,521\n" +
      "336,795 -> 336,161\n" +
      "456,297 -> 619,297\n" +
      "781,247 -> 781,980\n" +
      "336,508 -> 962,508\n" +
      "799,185 -> 799,593\n" +
      "63,180 -> 508,180\n" +
      "281,389 -> 320,389\n" +
      "703,585 -> 816,698\n" +
      "151,758 -> 151,399\n" +
      "108,283 -> 156,331\n" +
      "988,986 -> 18,16\n" +
      "219,467 -> 704,467\n" +
      "614,909 -> 614,22\n" +
      "907,327 -> 410,824\n" +
      "869,628 -> 791,628\n" +
      "141,937 -> 161,937\n" +
      "139,866 -> 139,448\n" +
      "789,45 -> 78,45\n" +
      "852,395 -> 187,395\n" +
      "115,147 -> 956,988\n" +
      "702,274 -> 702,741\n" +
      "760,547 -> 760,324\n" +
      "749,18 -> 749,726\n" +
      "974,891 -> 108,25\n" +
      "67,646 -> 67,432\n" +
      "901,63 -> 61,903\n" +
      "929,77 -> 36,970\n" +
      "136,639 -> 382,639\n" +
      "292,687 -> 642,687\n" +
      "242,514 -> 698,58\n" +
      "613,261 -> 226,261\n" +
      "26,287 -> 430,287\n" +
      "640,713 -> 327,713\n" +
      "488,108 -> 488,484\n" +
      "257,183 -> 257,514\n" +
      "851,115 -> 139,115\n" +
      "193,375 -> 673,855"; // diagonal

  public static void main(String[] args) {
    List<Line> lines = new InputParser<Line>().convertInput(input, HydroVentsPart2::convertToLine);

    Map<Coordinate, Long> heatMap = lines.stream()
        .flatMap(line -> line.getCoordinates().stream())
        .collect(Collectors.groupingBy(coordinate -> coordinate, Collectors.counting()));

    String representation = buildRepresentation(heatMap);
    System.out.println(representation);

    long nrOf2OrMoreLinesCrossing = heatMap.entrySet().stream()
        .filter(entry -> entry.getValue() > 1)
        .count();
    System.out.println("Nr of 2 or more lines crossing: " + nrOf2OrMoreLinesCrossing);
  }

  private static String buildRepresentation(Map<Coordinate, Long> heatMap) {
    int maxX = heatMap.keySet().stream().max(Comparator.comparing(coordinate -> coordinate.x)).get().x;
    int maxY = heatMap.keySet().stream().max(Comparator.comparing(coordinate -> coordinate.y)).get().y;

    StringBuilder representation = new StringBuilder("\n");
    for (int y=0;y<=maxY;y++) {
      for (int x=0;x<=maxX;x++) {
        representation.append(render(new Coordinate(x, y), heatMap));
      }
      representation.append("\n");
    }
    return representation.toString();
  }

  private static String render(Coordinate coordinate, Map<Coordinate, Long> heatMap) {
    if (!heatMap.containsKey(coordinate)) {
      return ".";
    }
    return heatMap.get(coordinate) + "";
  }

  private static Line convertToLine(String lineInput) {
    String[] coordinateStrings = lineInput.split(" -> ");
    String[] startCoordinateStrings = coordinateStrings[0].split(",");
    String[] endCoordinateStrings = coordinateStrings[1].split(",");

    Coordinate startCoordinate = new Coordinate(Integer.parseInt(startCoordinateStrings[0]), Integer.parseInt(startCoordinateStrings[1]));
    Coordinate endCoordinate = new Coordinate(Integer.parseInt(endCoordinateStrings[0]), Integer.parseInt(endCoordinateStrings[1]));
    return new Line(startCoordinate, endCoordinate);
  }

  private static class Line {

    private final Coordinate start;
    private final Coordinate end;

    public Line(Coordinate start, Coordinate end) {
      this.start = start;
      this.end = end;
    }

    private List<Coordinate> getCoordinates() {
      int deltaX = end.x - start.x;
      int deltaY = end.y - start.y;

      int stepX = Integer.compare(deltaX, 0);
      int stepY = Integer.compare(deltaY, 0);

      int nrOfSteps = Integer.max(abs(deltaX), abs(deltaY));
      List<Coordinate> coordinates = new ArrayList<>();
      for (int steps=0;steps<=nrOfSteps;steps++) {
        int x = start.x + (steps * stepX);
        int y = start.y + (steps * stepY);
        coordinates.add(new Coordinate(x, y));
      }

      return coordinates;
    }
  }

  private static class Coordinate {
    int x;
    int y;

    public Coordinate(int x, int y) {
      this.x = x;
      this.y = y;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (o == null || getClass() != o.getClass()) {
        return false;
      }
      Coordinate that = (Coordinate) o;
      return x == that.x && y == that.y;
    }

    @Override
    public int hashCode() {
      return Objects.hash(x, y);
    }

    @Override
    public String toString() {
      return "[x=" + x + ", y=" + y + ']';
    }
  }
}
